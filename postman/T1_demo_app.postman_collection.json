{
	"info": {
		"_postman_id": "dc9fa86d-19ba-48a1-80ee-f6ea552cff25",
		"name": "T1_demo_app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12734979"
	},
	"item": [
		{
			"name": "Get account 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, clientId, accountType, and balance\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('clientId');",
							"    pm.expect(responseData).to.have.property('accountType');",
							"    pm.expect(responseData).to.have.property('balance');",
							"});",
							"",
							"",
							"pm.test(\"Account type is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.accountType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Account type should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Balance is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.balance).to.be.a('number');",
							"    pm.expect(responseData.balance).to.be.at.least(0, \"Balance should be a non-negative number\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/account/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"account",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get account 100 exception",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/account/100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"account",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Response has the required fields - id, accountId, amount, and transactionDate', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('accountId');",
							"    pm.expect(responseData).to.have.property('amount');",
							"    pm.expect(responseData).to.have.property('transactionDate');",
							"})",
							"",
							"pm.test('Amount is a non-negative number', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.amount).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
							"})",
							"",
							"pm.test('TransactionDate is in a valid date format', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.transactionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/transaction/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transaction 100 exception",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/transaction/100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify account 14",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientId\": 6,\r\n    \"accountType\": \"DEBIT\",\r\n    \"balance\": 1234.11\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/account/14",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"account",
						"14"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify transaction 14",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('accountId');",
							"    pm.expect(responseData).to.have.property('amount');",
							"    pm.expect(responseData).to.have.property('transactionDate');",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.amount).to.be.a('number');",
							"    pm.expect(responseData.amount).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"TransactionDate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.transactionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": 15,\r\n    \"amount\": 1235.12,\r\n    \"transactionDate\": \"2024-05-10T21:20:13Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/transaction/14",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction",
						"14"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete transaction 10",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/transaction/10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete account 3",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientId\": 6,\r\n    \"accountType\": \"DEBIT\",\r\n    \"balance\": 1234.11\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/account/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"account",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('clientId');",
							"    pm.expect(responseData).to.have.property('accountType');",
							"    pm.expect(responseData).to.have.property('balance');",
							"});",
							"",
							"",
							"pm.test(\"Account type must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.accountType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Account type should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Balance is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.balance).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.balance).to.be.at.least(0, \"Balance should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n    \"clientId\": 1,\r\n    \"accountType\": \"CREDIT\",\r\n    \"balance\": 54895.11\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/account",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"  });",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.accountId).to.exist;",
							"    pm.expect(responseData.amount).to.exist;",
							"    pm.expect(responseData.transactionDate).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.amount).to.be.a('number');",
							"    pm.expect(responseData.amount).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Transaction date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.transactionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": 5,\r\n    \"amount\": 1415.12,\r\n    \"transactionDate\": \"2024-07-01T20:30:59Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/transaction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					]
				}
			},
			"response": []
		}
	]
}